{
  "compilerOptions": {
    /* Basic Options */   
    "target": "es5",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],                                     /* Specify library files to be included in the compilation:  */
    "module": "esnext",                    /* Specify module code generation: 'commonjs', 'amd', 'system', 'umd' or 'es2015', 'esnext'. */
    "allowJs": true,                       /* Allow JavaScript files to be compiled. */
    "jsx": "react-jsx",                    /* Specify JSX code generation: 'preserve', 'react-native', or 'react-jsx'. */
    "removeComments": true,                /* Do not emit comments to output. */
    "noEmit": true,                        /* Do not emit outputs. */
    "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */


    /* Strict Type-Checking Options */        
    "strict": true,                        /* Enable all strict type-checking options. */
    "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    "strictNullChecks": true,              /* Enable strict null checks. */
    "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */                   
    "noUnusedLocals": true,                /* Report errors on unused locals. */
    "noUnusedParameters": true,            /* Report errors on unused parameters. */
    "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */           
    "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    "typeRoots": [],                       /* List of folders to include type definitions from. */
    "types": [],                           /* Type declaration files to be included in compilation. */
    "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */

    /* Completeness Options */
    "skipLibCheck": true,                  /* A common case where you might think to use skipLibCheck is when there are two copies of a library’s types in your node_modules */

    /* Interop Constraints */
    "esModuleInterop": true,                  /* By default (with esModuleInterop false or not set) TypeScript treats CommonJS/AMD/UMD modules similar to ES6 modules. */
    "forceConsistentCasingInFileNames": true, /* TypeScript will issue an error if a program tries to include a file by a casing different from the casing on disk. */
    "resolveJsonModule": true,                /* Allows importing modules with a ‘.json’ extension */
    
  },
  "include": [
    "src/**/*" 
  ],                                       /* Specifies an array of filenames or patterns to include in the program. These filenames are resolved relative to the directory containing the tsconfig.json file. */
}
